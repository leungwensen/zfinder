/* jshint strict: true, undef: true, unused: true */
/* global define, GLOBAL_CONST */

define('../global/CONST',[],function() {
    'use strict';
    /*
     * @author: Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description: description
     */
    return GLOBAL_CONST;
});


/* jshint ignore:start */
define('../template/modal',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div class="modal"><header class="modal-header"><span class="modal-title">'+_e(title)+'</span><span class="modal-close float-right fa fa-close"></span></header><div class="modal-body"></div></div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint strict: true, undef: true, unused: true */
/* global define, document */

define('../component/Modal',[
    'pastry/pastry',
    'pastry/dom/class',
    'pastry/dom/construct',
    'pastry/dom/event',
    'pastry/dom/query',
    'pastry/dom/style',
    'pastry/oop/declare',
    'pastry/ui/Component',
    '../template/modal'
], function(
    pastry,
    domClass,
    domConstruct,
    domEvent,
    domQuery,
    domStyle,
    declare,
    Component,
    tmplModal
) {
    'use strict';
    /*
     * @author      : Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description : description
     */
    var noop = function() { },
        extend = pastry.extend,
        defaulOptions = {
            classname: '',
            title: '',
            width: '600px'
        },
        Modal = declare({
            constructor: function(options) {
                options = extend({}, defaulOptions, options);
                var me = this,
                    domNode = domConstruct.toDom(tmplModal(options));
                extend(me, options);
                domConstruct.place(domNode, document.body);
                me.domNode = domNode;
                domStyle.set(domNode, 'width', options.width);
                domClass.add(domNode, options.classname);
                me.domNodes = {
                    title: domQuery.one('.modal-title', domNode),
                    close: domQuery.one('.modal-close', domNode),
                    body: domQuery.one('.modal-body', domNode),
                };
                me._bindEvents();
                return me;
            },
            show: function() {
                var me = this;
                domClass.add(me.domNode, 'show');
                me.isShown = true;
                me.onShow();
                return me;
            },
            hide: function() {
                var me = this;
                domClass.remove(me.domNode, 'show');
                me.isShown = false;
                me.onHide();
                return me;
            },
            toggle: function() {
                var me = this;
                me[me.isShown ? 'hide' : 'show']();
                return me;
            },
            isShown: false,
            _bindEvents: function() {
                var me = this;
                domEvent.on(me.domNodes.close, 'click', function() {
                    me.hide();
                });
                return me;
            },
            onShow: noop,
            onHide: noop,
        });
    return Modal;
});


/* jshint ignore:start */
define('../template/resizer',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div class="resizer-wrapper resizer-d resizer-d-'+_e(direction)+'" data-direction="'+_e(direction)+'"><div class="resizer-handler"></div></div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint strict: true, undef: true, unused: true */
/* global define, window, document */

define('../component/Resizer',[
    'pastry/pastry',
    'pastry/dom/class',
    'pastry/dom/construct',
    'pastry/dom/event',
    'pastry/dom/query',
    'pastry/dom/style',
    'pastry/oop/declare',
    '../template/resizer'
], function(
    pastry,
    domClass,
    domConstruct,
    domEvent,
    domQuery,
    domStyle,
    declare,
    tmplResizer
) {
    'use strict';
    /*
     * @author: Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description: resize a domNode
     * @syntax:
     // new Resizer(domNode, {
     //     directions : [],  // ['e', 's', 'w', 'n', 'ne', 'se', 'sw', 'nw'] ÁöÑ‰∏Ä‰∏™Â≠êÈõÜ.
     // });
     */
    var win = window,

        DEFAULT_DIRECTIONS = [
            'e',
            's',
            'se'
        ],
        defaultOpt = {
            minWidth: 0,
            maxWidth: Infinity,
            minHeight: 0,
            maxHeight: Infinity
        },
        ON_RESIZE = function () { },
        body = document.body,
        cssNoSelect = 'non-select',

        Resizer = declare('pastry/ui/Resizer', [], {
            constructor: function (domNode, opts) {
                opts = pastry.merge({}, defaultOpt, opts);
                if (!pastry.isArray(opts.directions) || opts.directions.length === 0) {
                    opts.directions = DEFAULT_DIRECTIONS;
                }
                opts.onResize = opts.onResize || ON_RESIZE;

                var resizer = this;
                resizer.domNode = domQuery.one(domNode);
                resizer.options = opts;
                pastry.each(opts.directions, function (direction) {
                    resizer._createHandler(direction);
                });
                return resizer;
            },
            _createHandler: function (direction) {
                var resizer = this,
                    domNode = resizer.domNode,
                    resizerDom = tmplResizer({
                        direction: direction
                    }),
                    limitRange = resizer._limitRange.bind(resizer, direction),
                    resizerWrapDom,
                    handlerDiv;

                function resize (e) {
                    e.stopPropagation();
                    if (direction.indexOf('n') !== -1) {
                        domStyle.set(domNode, 'height', limitRange(resizer._startH + (resizer._startY - e.pageY)) + 'px');
                    }
                    if (direction.indexOf('s') !== -1) {
                        domStyle.set(domNode, 'height', limitRange(resizer._startH + (e.pageY - resizer._startY)) + 'px');
                    }
                    if (direction.indexOf('e') !== -1) {
                        domStyle.set(domNode, 'width', limitRange(resizer._startW + (e.pageX - resizer._startX)) + 'px');
                    }
                    if (direction.indexOf('w') !== -1) {
                        domStyle.set(domNode, 'width', limitRange(resizer._startW + (resizer._startX - e.pageX)) + 'px');
                    }
                    // prevent selecting
                    domClass.add(body, cssNoSelect);
                }
                function stop (e) {
                    e.stopPropagation();
                    domEvent.off(win, 'mousemove', resize);
                    domEvent.off(win, 'mouseup', stop);

                    resizer._triggerResize();

                    // enable selecting again
                    domClass.remove(body, cssNoSelect);
                }
                function start (e) {
                    e.stopPropagation();
                    resizer._startX = e.pageX;
                    resizer._startY = e.pageY;
                    resizer._startW = domNode.offsetWidth;
                    resizer._startH = domNode.offsetHeight;
                    domEvent.on(win, 'mouseup', stop);
                    domEvent.on(win, 'mousemove', resize);
                }

                domConstruct.place(resizerDom, domNode, 'first');
                resizerWrapDom = domQuery.one('.resizer-d-' + direction, domNode);
                handlerDiv = domQuery.one('.resizer-handler', resizerWrapDom);
                if (resizer.options.needShrink) {
                    resizer.btn = domQuery.one('.resizer-btn', resizerWrapDom);
                    resizer.toggle = function() {
                        resizer._toggle(resizerWrapDom, resizer.btn);
                    };

                    domEvent.on(resizer.btn, 'click', function() {
                        resizer.toggle.call(resizer);
                        if (pastry.isFunction(resizer.options.onClick)) {
                            resizer.options.onClick(resizer.isHide);
                        }
                    });
                }
                domEvent.on(handlerDiv, 'mousedown', start);
            },
            setSize: function(width, height) {
                var resizer = this,
                    domNode = resizer.domNode,
                    limitRange;
                if (width) {
                    limitRange = resizer._limitRange.bind(resizer, 'w');
                    domStyle.set(domNode, 'width', limitRange(width) + 'px');
                }
                if (height) {
                    limitRange = resizer._limitRange.bind(resizer, 'n');
                    domStyle.set(domNode, 'height', limitRange(height) + 'px');
                }
                return resizer;
            },
            _triggerResize: function(){
                var domNode = this.domNode;
                this.options.onResize(
                    domStyle.get(domNode, 'height'),
                    domStyle.get(domNode, 'width')
                );
            },
            _limitRange: function(direction, value) {
                var resizer = this,
                    max = direction === 'w' || direction === 'e' ? resizer.options.maxWidth : resizer.options.maxHeight,
                    min = direction === 'w' || direction === 'e' ? resizer.options.minWidth : resizer.options.minHeight;
                return Math.min(max, Math.max(min, value));
            }
        });
    return Resizer;
});

define('../component/emojiMap',{
    "%)": "üòï",
    "%-)": "üòï",
    "0:)": "üòá",
    "0:-)": "üòá",
    "0:-3": "üòá",
    "0:3": "üòá",
    "3:)": "üòà",
    "3:-)": "üòà",
    "8)": "üòé",
    "8-)": "üòé",
    ":$": "üòä",
    ":'(": "üò¢",
    ":(": "üò¶",
    ":)": "üòÉ",
    ":))": "üòÑ",
    ":*": "üòó",
    ":+1:": "üëç",
    ":-'(": "üò¢",
    ":-(": "üò¶",
    ":-)": "üòÉ",
    ":-))": "üòÑ",
    ":-/": "üòí",
    ":-1:": "üëé",
    ":-D": "üòÜ",
    ":-O": "üòÆ",
    ":-P": "üòõ",
    ":-[": "üò¶",
    ":-\\": "üòí",
    ":-o": "üòÆ",
    ":-p": "üòõ",
    ":-|": "üòê",
    ":-||": "üò†",
    ":/": "üòí",
    ":100:": "üíØ",
    ":1234:": "üî¢",
    ":8ball:": "üé±",
    ":@": "üò†",
    ":D": "üòÜ",
    ":O": "üòÆ",
    ":P": "üòõ",
    ":[": "üò¶",
    ":\\": "üòí",
    ":]": "üòÉ",
    ":^*": "üòó",
    ":a:": "üÖ∞",
    ":ab:": "üÜé",
    ":abc:": "üî§",
    ":abcd:": "üî°",
    ":accept:": "üâë",
    ":aerial_tramway:": "üö°",
    ":airplane:": "\u2708",
    ":alarm_clock:": "\u23F0",
    ":alien:": "üëΩ",
    ":ambulance:": "üöë",
    ":anchor:": "\u2693",
    ":angel:": "üëº",
    ":anger:": "üí¢",
    ":angry:": "üò†",
    ":anguished:": "üòß",
    ":ant:": "üêú",
    ":apple:": "üçé",
    ":aquarius:": "\u2652",
    ":aries:": "\u2648",
    ":arrow_backward:": "\u25C0",
    ":arrow_double_down:": "\u23EC",
    ":arrow_double_up:": "\u23EB",
    ":arrow_down:": "\u2B07",
    ":arrow_down_small:": "üîΩ",
    ":arrow_forward:": "\u25B6",
    ":arrow_heading_down:": "\u2935",
    ":arrow_heading_up:": "\u2934",
    ":arrow_left:": "\u2B05",
    ":arrow_lower_left:": "\u2199",
    ":arrow_lower_right:": "\u2198",
    ":arrow_right:": "\u27A1",
    ":arrow_right_hook:": "\u21AA",
    ":arrow_up:": "\u2B06",
    ":arrow_up_down:": "\u2195",
    ":arrow_up_small:": "üîº",
    ":arrow_upper_left:": "\u2196",
    ":arrow_upper_right:": "\u2197",
    ":arrows_clockwise:": "üîÉ",
    ":arrows_counterclockwise:": "üîÑ",
    ":art:": "üé®",
    ":articulated_lorry:": "üöõ",
    ":astonished:": "üò≤",
    ":athletic_shoe:": "üëü",
    ":atm:": "üèß",
    ":b:": "üÖ±",
    ":baby:": "üë∂",
    ":baby_bottle:": "üçº",
    ":baby_chick:": "üê§",
    ":baby_symbol:": "üöº",
    ":back:": "üîô",
    ":baggage_claim:": "üõÑ",
    ":balloon:": "üéà",
    ":ballot_box_with_check:": "\u2611",
    ":bamboo:": "üéç",
    ":banana:": "üçå",
    ":bangbang:": "\u203C",
    ":bank:": "üè¶",
    ":bar_chart:": "üìä",
    ":barber:": "üíà",
    ":baseball:": "\u26BE",
    ":basketball:": "üèÄ",
    ":bath:": "üõÄ",
    ":bathtub:": "üõÅ",
    ":battery:": "üîã",
    ":bear:": "üêª",
    ":bee:": "üêù",
    ":beer:": "üç∫",
    ":beers:": "üçª",
    ":beetle:": "üêû",
    ":beginner:": "üî∞",
    ":bell:": "üîî",
    ":bento:": "üç±",
    ":bicyclist:": "üö¥",
    ":bike:": "üö≤",
    ":bikini:": "üëô",
    ":bird:": "üê¶",
    ":birthday:": "üéÇ",
    ":black_circle:": "\u26AB",
    ":black_joker:": "üÉè",
    ":black_large_square:": "\u2B1B",
    ":black_medium_small_square:": "\u25FE",
    ":black_medium_square:": "\u25FC",
    ":black_nib:": "\u2712",
    ":black_small_square:": "\u25AA",
    ":black_square_button:": "üî≤",
    ":blossom:": "üåº",
    ":blowfish:": "üê°",
    ":blue_book:": "üìò",
    ":blue_car:": "üöô",
    ":blue_heart:": "üíô",
    ":blush:": "üòä",
    ":boar:": "üêó",
    ":boat:": "\u26F5",
    ":bomb:": "üí£",
    ":book:": "üìñ",
    ":bookmark:": "üîñ",
    ":bookmark_tabs:": "üìë",
    ":books:": "üìö",
    ":boom:": "üí•",
    ":boot:": "üë¢",
    ":bouquet:": "üíê",
    ":bow:": "üôá",
    ":bowling:": "üé≥",
    ":boy:": "üë¶",
    ":bread:": "üçû",
    ":bride_with_veil:": "üë∞",
    ":bridge_at_night:": "üåâ",
    ":briefcase:": "üíº",
    ":broken_heart:": "üíî",
    ":bug:": "üêõ",
    ":bulb:": "üí°",
    ":bullettrain_front:": "üöÖ",
    ":bullettrain_side:": "üöÑ",
    ":bus:": "üöå",
    ":busstop:": "üöè",
    ":bust_in_silhouette:": "üë§",
    ":busts_in_silhouette:": "üë•",
    ":cactus:": "üåµ",
    ":cake:": "üç∞",
    ":calendar:": "üìÜ",
    ":calling:": "üì≤",
    ":camel:": "üê´",
    ":camera:": "üì∑",
    ":cancer:": "\u264B",
    ":candy:": "üç¨",
    ":capital_abcd:": "üî†",
    ":capricorn:": "\u2651",
    ":car:": "üöó",
    ":card_index:": "üìá",
    ":carousel_horse:": "üé†",
    ":cat2:": "üêà",
    ":cat:": "üê±",
    ":cd:": "üíø",
    ":chart:": "üíπ",
    ":chart_with_downwards_trend:": "üìâ",
    ":chart_with_upwards_trend:": "üìà",
    ":checkered_flag:": "üèÅ",
    ":cherries:": "üçí",
    ":cherry_blossom:": "üå∏",
    ":chestnut:": "üå∞",
    ":chicken:": "üêî",
    ":children_crossing:": "üö∏",
    ":chocolate_bar:": "üç´",
    ":christmas_tree:": "üéÑ",
    ":church:": "\u26EA",
    ":cinema:": "üé¶",
    ":circus_tent:": "üé™",
    ":city_sunrise:": "üåá",
    ":city_sunset:": "üåÜ",
    ":cl:": "üÜë",
    ":clap:": "üëè",
    ":clapper:": "üé¨",
    ":clipboard:": "üìã",
    ":clock1030:": "üï•",
    ":clock10:": "üïô",
    ":clock1130:": "üï¶",
    ":clock11:": "üïö",
    ":clock1230:": "üïß",
    ":clock12:": "üïõ",
    ":clock130:": "üïú",
    ":clock1:": "üïê",
    ":clock230:": "üïù",
    ":clock2:": "üïë",
    ":clock330:": "üïû",
    ":clock3:": "üïí",
    ":clock430:": "üïü",
    ":clock4:": "üïì",
    ":clock530:": "üï†",
    ":clock5:": "üïî",
    ":clock630:": "üï°",
    ":clock6:": "üïï",
    ":clock730:": "üï¢",
    ":clock7:": "üïñ",
    ":clock830:": "üï£",
    ":clock8:": "üïó",
    ":clock930:": "üï§",
    ":clock9:": "üïò",
    ":closed_book:": "üìï",
    ":closed_lock_with_key:": "üîê",
    ":closed_umbrella:": "üåÇ",
    ":cloud:": "\u2601",
    ":clubs:": "\u2663",
    ":cocktail:": "üç∏",
    ":coffee:": "\u2615",
    ":cold_sweat:": "üò∞",
    ":collision:": "üí•",
    ":computer:": "üíª",
    ":confetti_ball:": "üéä",
    ":confounded:": "üòñ",
    ":confused:": "üòï",
    ":congratulations:": "\u3297",
    ":construction:": "üöß",
    ":construction_worker:": "üë∑",
    ":convenience_store:": "üè™",
    ":cookie:": "üç™",
    ":cool:": "üÜí",
    ":cop:": "üëÆ",
    ":copyright:": "\u00A9",
    ":corn:": "üåΩ",
    ":couple:": "üë´",
    ":couple_with_heart:": "üíë",
    ":couplekiss:": "üíè",
    ":cow2:": "üêÑ",
    ":cow:": "üêÆ",
    ":credit_card:": "üí≥",
    ":crocodile:": "üêä",
    ":crossed_flags:": "üéå",
    ":crown:": "üëë",
    ":cry:": "üò¢",
    ":crying_cat_face:": "üòø",
    ":crystal_ball:": "üîÆ",
    ":cupid:": "üíò",
    ":curly_loop:": "\u27B0",
    ":currency_exchange:": "üí±",
    ":curry:": "üçõ",
    ":custard:": "üçÆ",
    ":customs:": "üõÉ",
    ":cyclone:": "üåÄ",
    ":dancer:": "üíÉ",
    ":dancers:": "üëØ",
    ":dango:": "üç°",
    ":dart:": "üéØ",
    ":dash:": "üí®",
    ":date:": "üìÖ",
    ":deciduous_tree:": "üå≥",
    ":department_store:": "üè¨",
    ":diamond_shape_with_a_dot_inside:": "üí†",
    ":diamonds:": "\u2666",
    ":disappointed:": "üòû",
    ":disappointed_relieved:": "üò•",
    ":dizzy:": "üí´",
    ":dizzy_face:": "üòµ",
    ":do_not_litter:": "üöØ",
    ":dog2:": "üêï",
    ":dog:": "üê∂",
    ":dollar:": "üíµ",
    ":dolls:": "üéé",
    ":dolphin:": "üê¨",
    ":door:": "üö™",
    ":doughnut:": "üç©",
    ":dragon:": "üêâ",
    ":dragon_face:": "üê≤",
    ":dress:": "üëó",
    ":dromedary_camel:": "üê™",
    ":droplet:": "üíß",
    ":dvd:": "üìÄ",
    ":e-mail:": "üìß",
    ":ear:": "üëÇ",
    ":ear_of_rice:": "üåæ",
    ":earth_africa:": "üåç",
    ":earth_americas:": "üåé",
    ":earth_asia:": "üåè",
    ":egg:": "üç≥",
    ":eggplant:": "üçÜ",
    ":eight_pointed_black_star:": "\u2734",
    ":eight_spoked_asterisk:": "\u2733",
    ":electric_plug:": "üîå",
    ":elephant:": "üêò",
    ":email:": "\u2709",
    ":end:": "üîö",
    ":envelope:": "\u2709",
    ":envelope_with_arrow:": "üì©",
    ":euro:": "üí∂",
    ":european_castle:": "üè∞",
    ":european_post_office:": "üè§",
    ":evergreen_tree:": "üå≤",
    ":exclamation:": "\u2757",
    ":expressionless:": "üòë",
    ":eyeglasses:": "üëì",
    ":eyes:": "üëÄ",
    ":facepunch:": "üëä",
    ":factory:": "üè≠",
    ":fallen_leaf:": "üçÇ",
    ":family:": "üë™",
    ":fast_forward:": "\u23E9",
    ":fax:": "üì†",
    ":fearful:": "üò®",
    ":feet:": "üêæ",
    ":ferris_wheel:": "üé°",
    ":file_folder:": "üìÅ",
    ":fire:": "üî•",
    ":fire_engine:": "üöí",
    ":fireworks:": "üéÜ",
    ":first_quarter_moon:": "üåì",
    ":first_quarter_moon_with_face:": "üåõ",
    ":fish:": "üêü",
    ":fish_cake:": "üç•",
    ":fishing_pole_and_fish:": "üé£",
    ":fist:": "\u270A",
    ":flags:": "üéè",
    ":flashlight:": "üî¶",
    ":floppy_disk:": "üíæ",
    ":flower_playing_cards:": "üé¥",
    ":flushed:": "üò≥",
    ":foggy:": "üåÅ",
    ":football:": "üèà",
    ":footprints:": "üë£",
    ":fork_and_knife:": "üç¥",
    ":fountain:": "\u26F2",
    ":four_leaf_clover:": "üçÄ",
    ":free:": "üÜì",
    ":fried_shrimp:": "üç§",
    ":fries:": "üçü",
    ":frog:": "üê∏",
    ":frowning:": "üò¶",
    ":fuelpump:": "\u26FD",
    ":full_moon:": "üåï",
    ":full_moon_with_face:": "üåù",
    ":game_die:": "üé≤",
    ":gem:": "üíé",
    ":gemini:": "\u264A",
    ":ghost:": "üëª",
    ":gift:": "üéÅ",
    ":gift_heart:": "üíù",
    ":girl:": "üëß",
    ":globe_with_meridians:": "üåê",
    ":goat:": "üêê",
    ":golf:": "\u26F3",
    ":grapes:": "üçá",
    ":green_apple:": "üçè",
    ":green_book:": "üìó",
    ":green_heart:": "üíö",
    ":grey_exclamation:": "\u2755",
    ":grey_question:": "\u2754",
    ":grimacing:": "üò¨",
    ":grin:": "üòÅ",
    ":grinning:": "üòÄ",
    ":guardsman:": "üíÇ",
    ":guitar:": "üé∏",
    ":gun:": "üî´",
    ":haircut:": "üíá",
    ":halo:": "üòá",
    ":hamburger:": "üçî",
    ":hammer:": "üî®",
    ":hamster:": "üêπ",
    ":hand:": "\u270B",
    ":handbag:": "üëú",
    ":hankey:": "üí©",
    ":hatched_chick:": "üê•",
    ":hatching_chick:": "üê£",
    ":headphones:": "üéß",
    ":hear_no_evil:": "üôâ",
    ":heart:": "\u2764",
    ":heart_decoration:": "üíü",
    ":heart_eyes:": "üòç",
    ":heart_eyes_cat:": "üòª",
    ":heartbeat:": "üíì",
    ":heartpulse:": "üíó",
    ":hearts:": "\u2665",
    ":heavy_check_mark:": "\u2714",
    ":heavy_division_sign:": "\u2797",
    ":heavy_dollar_sign:": "üí≤",
    ":heavy_exclamation_mark:": "\u2757",
    ":heavy_minus_sign:": "\u2796",
    ":heavy_multiplication_x:": "\u2716",
    ":heavy_plus_sign:": "\u2795",
    ":helicopter:": "üöÅ",
    ":herb:": "üåø",
    ":hibiscus:": "üå∫",
    ":high_brightness:": "üîÜ",
    ":high_heel:": "üë†",
    ":hocho:": "üî™",
    ":honey_pot:": "üçØ",
    ":honeybee:": "üêù",
    ":horse:": "üê¥",
    ":horse_racing:": "üèá",
    ":hospital:": "üè•",
    ":hotel:": "üè®",
    ":hotsprings:": "\u2668",
    ":hourglass:": "\u231B",
    ":hourglass_flowing_sand:": "\u23F3",
    ":house:": "üè†",
    ":house_with_garden:": "üè°",
    ":hushed:": "üòØ",
    ":ice_cream:": "üç®",
    ":icecream:": "üç¶",
    ":id:": "üÜî",
    ":ideograph_advantage:": "üâê",
    ":imp:": "üëø",
    ":inbox_tray:": "üì•",
    ":incoming_envelope:": "üì®",
    ":information_desk_person:": "üíÅ",
    ":information_source:": "\u2139",
    ":innocent:": "üòá",
    ":interrobang:": "\u2049",
    ":iphone:": "üì±",
    ":izakaya_lantern:": "üèÆ",
    ":jack_o_lantern:": "üéÉ",
    ":japan:": "üóæ",
    ":japanese_castle:": "üèØ",
    ":japanese_goblin:": "üë∫",
    ":japanese_ogre:": "üëπ",
    ":jeans:": "üëñ",
    ":joy:": "üòÇ",
    ":joy_cat:": "üòπ",
    ":key:": "üîë",
    ":keycap_ten:": "üîü",
    ":kimono:": "üëò",
    ":kiss:": "üíã",
    ":kissing:": "üòó",
    ":kissing_cat:": "üòΩ",
    ":kissing_closed_eyes:": "üòö",
    ":kissing_heart:": "üòò",
    ":kissing_smiling_eyes:": "üòô",
    ":koala:": "üê®",
    ":koko:": "üàÅ",
    ":large_blue_circle:": "üîµ",
    ":large_blue_diamond:": "üî∑",
    ":large_orange_diamond:": "üî∂",
    ":last_quarter_moon:": "üåó",
    ":last_quarter_moon_with_face:": "üåú",
    ":laugh:": "üòÜ",
    ":laughing:": "üòÜ",
    ":leaves:": "üçÉ",
    ":ledger:": "üìí",
    ":left_luggage:": "üõÖ",
    ":left_right_arrow:": "\u2194",
    ":leftwards_arrow_with_hook:": "\u21A9",
    ":lemon:": "üçã",
    ":leo:": "\u264C",
    ":leopard:": "üêÜ",
    ":libra:": "\u264E",
    ":light_rail:": "üöà",
    ":link:": "üîó",
    ":lips:": "üëÑ",
    ":lipstick:": "üíÑ",
    ":lock:": "üîí",
    ":lock_with_ink_pen:": "üîè",
    ":lollipop:": "üç≠",
    ":loop:": "\u27BF",
    ":loudspeaker:": "üì¢",
    ":love_hotel:": "üè©",
    ":love_letter:": "üíå",
    ":low_brightness:": "üîÖ",
    ":m:": "\u24C2",
    ":mag:": "üîç",
    ":mag_right:": "üîé",
    ":mahjong:": "üÄÑ",
    ":mailbox:": "üì´",
    ":mailbox_closed:": "üì™",
    ":mailbox_with_mail:": "üì¨",
    ":mailbox_with_no_mail:": "üì≠",
    ":man:": "üë®",
    ":man_with_gua_pi_mao:": "üë≤",
    ":man_with_turban:": "üë≥",
    ":mans_shoe:": "üëû",
    ":maple_leaf:": "üçÅ",
    ":mask:": "üò∑",
    ":massage:": "üíÜ",
    ":meat_on_bone:": "üçñ",
    ":mega:": "üì£",
    ":melon:": "üçà",
    ":memo:": "üìù",
    ":mens:": "üöπ",
    ":metro:": "üöá",
    ":microphone:": "üé§",
    ":microscope:": "üî¨",
    ":milky_way:": "üåå",
    ":minibus:": "üöê",
    ":minidisc:": "üíΩ",
    ":mobile_phone_off:": "üì¥",
    ":money_with_wings:": "üí∏",
    ":moneybag:": "üí∞",
    ":monkey:": "üêí",
    ":monkey_face:": "üêµ",
    ":monorail:": "üöù",
    ":moon:": "üåô",
    ":mortar_board:": "üéì",
    ":mount_fuji:": "üóª",
    ":mountain_bicyclist:": "üöµ",
    ":mountain_cableway:": "üö†",
    ":mountain_railway:": "üöû",
    ":mouse2:": "üêÅ",
    ":mouse:": "üê≠",
    ":movie_camera:": "üé•",
    ":moyai:": "üóø",
    ":muscle:": "üí™",
    ":mushroom:": "üçÑ",
    ":musical_keyboard:": "üéπ",
    ":musical_note:": "üéµ",
    ":musical_score:": "üéº",
    ":mute:": "üîá",
    ":nail_care:": "üíÖ",
    ":name_badge:": "üìõ",
    ":necktie:": "üëî",
    ":negative_squared_cross_mark:": "\u274E",
    ":neutral_face:": "üòê",
    ":new:": "üÜï",
    ":new_moon:": "üåë",
    ":new_moon_with_face:": "üåö",
    ":newspaper:": "üì∞",
    ":ng:": "üÜñ",
    ":no_bell:": "üîï",
    ":no_bicycles:": "üö≥",
    ":no_entry:": "\u26D4",
    ":no_entry_sign:": "üö´",
    ":no_good:": "üôÖ",
    ":no_mobile_phones:": "üìµ",
    ":no_mouth:": "üò∂",
    ":no_pedestrians:": "üö∑",
    ":no_smoking:": "üö≠",
    ":non-potable_water:": "üö±",
    ":nose:": "üëÉ",
    ":notebook:": "üìì",
    ":notebook_with_decorative_cover:": "üìî",
    ":notes:": "üé∂",
    ":nut_and_bolt:": "üî©",
    ":o": "üòÆ",
    ":o)": "üòÉ",
    ":o2:": "üÖæ",
    ":o:": "\u2B55",
    ":ocean:": "üåä",
    ":octopus:": "üêô",
    ":oden:": "üç¢",
    ":office:": "üè¢",
    ":ok:": "üÜó",
    ":ok_hand:": "üëå",
    ":ok_woman:": "üôÜ",
    ":older_man:": "üë¥",
    ":older_woman:": "üëµ",
    ":on:": "üîõ",
    ":oncoming_automobile:": "üöò",
    ":oncoming_bus:": "üöç",
    ":oncoming_police_car:": "üöî",
    ":oncoming_taxi:": "üöñ",
    ":open_book:": "üìñ",
    ":open_file_folder:": "üìÇ",
    ":open_hands:": "üëê",
    ":open_mouth:": "üòÆ",
    ":ophiuchus:": "\u26CE",
    ":orange_book:": "üìô",
    ":outbox_tray:": "üì§",
    ":ox:": "üêÇ",
    ":p": "üòõ",
    ":package:": "üì¶",
    ":page_facing_up:": "üìÑ",
    ":page_with_curl:": "üìÉ",
    ":pager:": "üìü",
    ":palm_tree:": "üå¥",
    ":panda_face:": "üêº",
    ":paperclip:": "üìé",
    ":parking:": "üÖø",
    ":part_alternation_mark:": "\u303D",
    ":partly_sunny:": "\u26C5",
    ":passport_control:": "üõÇ",
    ":paw_prints:": "üêæ",
    ":peach:": "üçë",
    ":pear:": "üçê",
    ":pencil2:": "\u270F",
    ":pencil:": "üìù",
    ":penguin:": "üêß",
    ":pensive:": "üòî",
    ":performing_arts:": "üé≠",
    ":persevere:": "üò£",
    ":person_frowning:": "üôç",
    ":person_with_blond_hair:": "üë±",
    ":person_with_pouting_face:": "üôé",
    ":phone:": "\u260E",
    ":pig2:": "üêñ",
    ":pig:": "üê∑",
    ":pig_nose:": "üêΩ",
    ":pill:": "üíä",
    ":pineapple:": "üçç",
    ":pisces:": "\u2653",
    ":pizza:": "üçï",
    ":point_down:": "üëá",
    ":point_left:": "üëà",
    ":point_right:": "üëâ",
    ":point_up:": "\u261D",
    ":point_up_2:": "üëÜ",
    ":police_car:": "üöì",
    ":poodle:": "üê©",
    ":poop:": "üí©",
    ":post_office:": "üè£",
    ":postal_horn:": "üìØ",
    ":postbox:": "üìÆ",
    ":potable_water:": "üö∞",
    ":pouch:": "üëù",
    ":poultry_leg:": "üçó",
    ":pound:": "üí∑",
    ":pouting_cat:": "üòæ",
    ":pray:": "üôè",
    ":princess:": "üë∏",
    ":punch:": "üëä",
    ":purple_heart:": "üíú",
    ":purse:": "üëõ",
    ":pushpin:": "üìå",
    ":put_litter_in_its_place:": "üöÆ",
    ":question:": "\u2753",
    ":rabbit2:": "üêá",
    ":rabbit:": "üê∞",
    ":racehorse:": "üêé",
    ":radio:": "üìª",
    ":radio_button:": "üîò",
    ":rage:": "üò°",
    ":railway_car:": "üöÉ",
    ":rainbow:": "üåà",
    ":raised_hand:": "\u270B",
    ":raised_hands:": "üôå",
    ":raising_hand:": "üôã",
    ":ram:": "üêè",
    ":ramen:": "üçú",
    ":rat:": "üêÄ",
    ":recycle:": "\u267B",
    ":red_car:": "üöó",
    ":red_circle:": "üî¥",
    ":registered:": "\u00AE",
    ":relaxed:": "\u263A",
    ":relieved:": "üòå",
    ":repeat:": "üîÅ",
    ":repeat_one:": "üîÇ",
    ":restroom:": "üöª",
    ":revolving_hearts:": "üíû",
    ":rewind:": "\u23EA",
    ":ribbon:": "üéÄ",
    ":rice:": "üçö",
    ":rice_ball:": "üçô",
    ":rice_cracker:": "üçò",
    ":rice_scene:": "üéë",
    ":ring:": "üíç",
    ":rocket:": "üöÄ",
    ":roller_coaster:": "üé¢",
    ":rooster:": "üêì",
    ":rose:": "üåπ",
    ":rotating_light:": "üö®",
    ":round_pushpin:": "üìç",
    ":rowboat:": "üö£",
    ":rugby_football:": "üèâ",
    ":runner:": "üèÉ",
    ":running:": "üèÉ",
    ":running_shirt_with_sash:": "üéΩ",
    ":sa:": "üàÇ",
    ":sagittarius:": "\u2650",
    ":sailboat:": "\u26F5",
    ":sake:": "üç∂",
    ":sandal:": "üë°",
    ":santa:": "üéÖ",
    ":satellite:": "üì°",
    ":satisfied:": "üòÜ",
    ":saxophone:": "üé∑",
    ":school:": "üè´",
    ":school_satchel:": "üéí",
    ":scissors:": "\u2702",
    ":scorpius:": "\u264F",
    ":scream:": "üò±",
    ":scream_cat:": "üôÄ",
    ":scroll:": "üìú",
    ":seat:": "üí∫",
    ":secret:": "\u3299",
    ":see_no_evil:": "üôà",
    ":seedling:": "üå±",
    ":shaved_ice:": "üçß",
    ":sheep:": "üêë",
    ":shell:": "üêö",
    ":ship:": "üö¢",
    ":shirt:": "üëï",
    ":shit:": "üí©",
    ":shoe:": "üëû",
    ":shower:": "üöø",
    ":signal_strength:": "üì∂",
    ":six_pointed_star:": "üîØ",
    ":ski:": "üéø",
    ":skull:": "üíÄ",
    ":sleeping:": "üò¥",
    ":sleepy:": "üò™",
    ":slot_machine:": "üé∞",
    ":small_blue_diamond:": "üîπ",
    ":small_orange_diamond:": "üî∏",
    ":small_red_triangle:": "üî∫",
    ":small_red_triangle_down:": "üîª",
    ":smile:": "üòÑ",
    ":smile_cat:": "üò∏",
    ":smiley:": "üòÉ",
    ":smiley_cat:": "üò∫",
    ":smiling_imp:": "üòà",
    ":smirk:": "üòè",
    ":smirk_cat:": "üòº",
    ":smoking:": "üö¨",
    ":snail:": "üêå",
    ":snake:": "üêç",
    ":snowboarder:": "üèÇ",
    ":snowflake:": "\u2744",
    ":snowman:": "\u26C4",
    ":sob:": "üò≠",
    ":soccer:": "\u26BD",
    ":soon:": "üîú",
    ":sos:": "üÜò",
    ":sound:": "üîâ",
    ":space_invader:": "üëæ",
    ":spades:": "\u2660",
    ":spaghetti:": "üçù",
    ":sparkle:": "\u2747",
    ":sparkler:": "üéá",
    ":sparkles:": "\u2728",
    ":sparkling_heart:": "üíñ",
    ":speak_no_evil:": "üôä",
    ":speaker:": "üîä",
    ":speech_balloon:": "üí¨",
    ":speedboat:": "üö§",
    ":star2:": "üåü",
    ":star:": "\u2B50",
    ":stars:": "üåÉ",
    ":station:": "üöâ",
    ":statue_of_liberty:": "üóΩ",
    ":steam_locomotive:": "üöÇ",
    ":stew:": "üç≤",
    ":straight_ruler:": "üìè",
    ":strawberry:": "üçì",
    ":stuck_out_tongue:": "üòõ",
    ":stuck_out_tongue_closed_eyes:": "üòù",
    ":stuck_out_tongue_winking_eye:": "üòú",
    ":sun_with_face:": "üåû",
    ":sunflower:": "üåª",
    ":sunglasses:": "üòé",
    ":sunny:": "\u2600",
    ":sunrise:": "üåÖ",
    ":sunrise_over_mountains:": "üåÑ",
    ":surfer:": "üèÑ",
    ":sushi:": "üç£",
    ":suspension_railway:": "üöü",
    ":sweat:": "üòì",
    ":sweat_drops:": "üí¶",
    ":sweat_smile:": "üòÖ",
    ":sweet_potato:": "üç†",
    ":swimmer:": "üèä",
    ":symbols:": "üî£",
    ":syringe:": "üíâ",
    ":tada:": "üéâ",
    ":tanabata_tree:": "üéã",
    ":tangerine:": "üçä",
    ":taurus:": "\u2649",
    ":taxi:": "üöï",
    ":tea:": "üçµ",
    ":telephone:": "\u260E",
    ":telephone_receiver:": "üìû",
    ":telescope:": "üî≠",
    ":tennis:": "üéæ",
    ":tent:": "\u26FA",
    ":thought_balloon:": "üí≠",
    ":thumbsdown:": "üëé",
    ":thumbsup:": "üëç",
    ":ticket:": "üé´",
    ":tiger2:": "üêÖ",
    ":tiger:": "üêØ",
    ":tired_face:": "üò´",
    ":tm:": "\u2122",
    ":toilet:": "üöΩ",
    ":tokyo_tower:": "üóº",
    ":tomato:": "üçÖ",
    ":tongue:": "üëÖ",
    ":top:": "üîù",
    ":tophat:": "üé©",
    ":tractor:": "üöú",
    ":traffic_light:": "üö•",
    ":train2:": "üöÜ",
    ":train:": "üöÉ",
    ":tram:": "üöä",
    ":triangular_flag_on_post:": "üö©",
    ":triangular_ruler:": "üìê",
    ":trident:": "üî±",
    ":triumph:": "üò§",
    ":trolleybus:": "üöé",
    ":trophy:": "üèÜ",
    ":tropical_drink:": "üçπ",
    ":tropical_fish:": "üê†",
    ":truck:": "üöö",
    ":trumpet:": "üé∫",
    ":tshirt:": "üëï",
    ":tulip:": "üå∑",
    ":turtle:": "üê¢",
    ":tv:": "üì∫",
    ":twisted_rightwards_arrows:": "üîÄ",
    ":two_hearts:": "üíï",
    ":two_men_holding_hands:": "üë¨",
    ":two_women_holding_hands:": "üë≠",
    ":u5272:": "üàπ",
    ":u5408:": "üà¥",
    ":u55b6:": "üà∫",
    ":u6307:": "üàØ",
    ":u6708:": "üà∑",
    ":u6709:": "üà∂",
    ":u6e80:": "üàµ",
    ":u7121:": "üàö",
    ":u7533:": "üà∏",
    ":u7981:": "üà≤",
    ":u7a7a:": "üà≥",
    ":umbrella:": "\u2614",
    ":unamused:": "üòí",
    ":underage:": "üîû",
    ":unlock:": "üîì",
    ":up:": "üÜô",
    ":v:": "\u270C",
    ":vertical_traffic_light:": "üö¶",
    ":vhs:": "üìº",
    ":vibration_mode:": "üì≥",
    ":video_camera:": "üìπ",
    ":video_game:": "üéÆ",
    ":violin:": "üéª",
    ":virgo:": "\u264D",
    ":volcano:": "üåã",
    ":vs:": "üÜö",
    ":walking:": "üö∂",
    ":waning_crescent_moon:": "üåò",
    ":waning_gibbous_moon:": "üåñ",
    ":warning:": "\u26A0",
    ":watch:": "\u231A",
    ":water_buffalo:": "üêÉ",
    ":watermelon:": "üçâ",
    ":wave:": "üëã",
    ":wavy_dash:": "\u3030",
    ":waxing_crescent_moon:": "üåí",
    ":waxing_gibbous_moon:": "üåî",
    ":wc:": "üöæ",
    ":weary:": "üò©",
    ":wedding:": "üíí",
    ":whale2:": "üêã",
    ":whale:": "üê≥",
    ":wheelchair:": "\u267F",
    ":white_check_mark:": "\u2705",
    ":white_circle:": "\u26AA",
    ":white_flower:": "üíÆ",
    ":white_large_square:": "\u2B1C",
    ":white_medium_small_square:": "\u25FD",
    ":white_medium_square:": "\u25FB",
    ":white_small_square:": "\u25AB",
    ":white_square_button:": "üî≥",
    ":wind_chime:": "üéê",
    ":wine_glass:": "üç∑",
    ":wink:": "üòâ",
    ":wolf:": "üê∫",
    ":woman:": "üë©",
    ":womans_clothes:": "üëö",
    ":womans_hat:": "üëí",
    ":womens:": "üö∫",
    ":worried:": "üòü",
    ":wrench:": "üîß",
    ":x:": "\u274C",
    ":yellow_heart:": "üíõ",
    ":yen:": "üí¥",
    ":yum:": "üòã",
    ":zap:": "\u26A1",
    ":zzz:": "üí§",
    ":|": "üòê",
    ";)": "üòâ",
    ";-)": "üòâ",
    ">:(": "üò†",
    "X-D": "üòÅ",
    "X-P": "üòù",
    "X-p": "üòù",
    "XD": "üòÅ",
    "XP": "üòù",
    "Xp": "üòù",
    "x-D": "üòÅ",
    "x-P": "üòù",
    "xD": "üòÅ",
    "xP": "üòù",
    "}:)": "üòà",
    "}:-)": "üòà",
});


/* jshint ignore:start */
define('../template/markdown/emojiFix',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<span style="font-weight: normal !important;">'+_e(emoji)+'</span>';}return _s;
}});
/* jshint ignore:end */;
/* jshint ignore:start */
define('../template/markdown/figure',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<figure><img src="'+_e(href)+'" alt="'+_e(text)+'" title="'+_e(title)+'"/><figcaption>'+_e(text)+'</figcaption></figure>';}return _s;
}});
/* jshint ignore:end */;
/* jshint ignore:start */
define('../template/markdown/flowchart',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div class="flowchart"><script type="text/template" class="flowchart-code">'+_e(code)+'</script><div class="flowchart-graph"></div></div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint ignore:start */
define('../template/markdown/math',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div data-line="'+_e(lineNumber)+'">'+_e(tex)+'</div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint ignore:start */
define('../template/markdown/mermaidGraph',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div class="mermaid">'+_e(code)+'</div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint ignore:start */
define('../template/markdown/taskListItem',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<li class="task-list-item"><input type="checkbox" disabled ';if (checked) { _s+=' checked ';} _s+='>'+_e(text)+'</li>';}return _s;
}});
/* jshint ignore:end */;
/* jshint strict: true, undef: true, unused: false */
/* global define, marked, katex, mermaid */

define('../component/marked',[
    'pastry/pastry',
    'pastry/fmt/sprintf',
    'pastry/html/escape',
    './emojiMap',
    '../template/markdown/emojiFix',
    '../template/markdown/figure',
    '../template/markdown/flowchart',
    '../template/markdown/math',
    '../template/markdown/mermaidGraph',
    '../template/markdown/taskListItem'
], function(
    pastry,
    sprintf,
    htmlEscape,
    emojiMap,
    tmplEmojiFix,
    tmplFigure,
    tmplFlowchart,
    tmplMath,
    tmplMermaidGraph,
    tmplTaskListItem
) {
    'use strict';
    /*
     * @author: Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description: description
     */
    var mermaidError;

    var each = pastry.each,
        lc = pastry.lc,
        map = pastry.map,
        trim = pastry.trim;

    var Renderer = marked.Renderer;
    var RendererPrototype = Renderer.prototype;
    var renderer = new Renderer();
    var unescape = htmlEscape.unescape;

    mermaid.parseError = function(err/*, hash*/){
        mermaidError = err;
    };

    renderer.listitem = function(text) { // list item
        if(!/^\[[ x]\]\s/.test(text)) { // normal list item
            return marked.Renderer.prototype.listitem(text);
        }
        return tmplTaskListItem({
            checked: /^\[x\]\s/.test(text),
            text: text.substring(3)
        }, true);
    };

    renderer.codespan = function(code) { // inline code
        if(/^\$.+\$$/.test(code)) { // inline math typesetting
            var raw = /^\$(.+)\$$/.exec(code)[1],
                line = unescape(raw);
            try{
                return katex.renderToString(line, {
                    displayMode: false
                });
            } catch(err) {
                return sprintf('<code>%s</code>', err);
            }
        }
        return RendererPrototype.codespan.apply(this, arguments);
    };

    renderer.code = function(code, lang, escaped, lineNumber) { // code block
        code = trim(code);
        var firstLine = lc(trim(code.split(/\n/)[0]));
        if (lang === 'markdown' || lang === 'md') {
            return RendererPrototype.code.apply(this, arguments);
        }
        if (firstLine === 'math') { // math typesetting
            var tex = '';
            each(code.replace(/^math\s*/, '').split(/\n\n/), function(line){
                // next if we have two empty lines
                line = trim(line);
                if (line.length > 0) {
                    try {
                        tex +=  katex.renderToString(line, {
                            displayMode: true
                        });
                    } catch(err) {
                        tex += sprintf('<pre>%s</pre>', err);
                    }
                }
            });
            return tmplMath({
                lineNumber: lineNumber,
                tex: tex,
            }, true);
        } else if ( // graphs
            firstLine === 'gantt' ||
            firstLine === 'sequencediagram' ||
            firstLine.match(/^graph (?:tb|bt|rl|lr|td);?$/)
        ){
            if(firstLine === 'sequencediagram') {
                code += '\n'; // empty line in the end or error
            }
            return tmplMermaidGraph({
                code: code,
            }, true);
        } else if (firstLine === 'flowchart') { // flowchart
            code = map(code
                // remove firstLine
                .replace(new RegExp('^' + firstLine + '\n', 'ig'), '')
                .replace(/^\n/, '').split(/\n/), function(line) {
                    // have to trim
                    return trim(line);
                }).join('\n');
            return tmplFlowchart({
                code: code
            }, true);
        }
        return RendererPrototype.code.apply(this, arguments);
    };
    renderer.image = function(href, title, text) {
        return tmplFigure({
            href: href,
            text: text,
            title: title || ''
        });
    };

    renderer.text = function(text) { // text span
        var words = text.split(' ');
        return map(words, function(word) {
            word = trim(word);
            if (emojiMap[word]) {
                return tmplEmojiFix({
                    emoji: emojiMap[word]
                });
            }
            return word;
        }).join(' ');
    };

    marked.setOptions({
        breaks: false,
        pedantic: false,
        renderer: renderer,
        sanitize: false,
        smartLists: true,
        smartypants: true,
        tables: true,
    });
    return marked;
});


/* jshint strict: true, undef: true, unused: true */
/* global define, flowchart, console, document, mermaid */

define('../component/markedRenderer',[
    'pastry/pastry',
    'pastry/dom/attr',
    'pastry/dom/query',
    'pastry/dom/style',
    './marked'
], function(
    pastry,
    domAttr,
    domQuery,
    domStyle,
    marked
) {
    'use strict';
    /*
     * @author: Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description: description
     */
    var each = pastry.each,
        destroy = pastry.destroy;

    var flowchartOptions = {
        'x': 0,
        'y': 0,
        'line-width': 2,
        'line-length': 40,
        'text-margin': 10,
        'font-size': 14,
        'font-color': 'black',
        'line-color': 'grey',
        'element-color': 'grey',
        'fill': 'lightyellow',
        'yes-text': 'yes',
        'no-text': 'no',
        'arrow-end': 'block',
        'scale': 1,
    };
    var flowchartInstanceCache = [];

    function drawFlowcharts(scope) {
        /*
         * scope is a node with structure like:
         *     <div class="flowchart">
         *         <div class="flowchart-graph"></div>
         *         <script class="flowchart-code">{%= code %}</script>
         *     </div>
         */
        each(flowchartInstanceCache, function(instance) {
            destroy(instance);
        });
        flowchartInstanceCache = [];
        each(domQuery.all('.flowchart', scope), function(container) {
            try {
                var codeElement = domQuery.one('.flowchart-code', container);
                var graphElement = domQuery.one('.flowchart-graph', container);
                var diagram = flowchart.parse(codeElement.innerHTML);
                diagram.drawSVG(graphElement, flowchartOptions);
                flowchartInstanceCache.push(diagram);
            } catch(e) {
                console.log(e);
            }
        });
    }
    function renderMermaidGraphs(scope) {
        /*
         * scope is the node to render in
         */
        scope = scope || document.body;
        try {
            mermaid.init(null, domQuery.all('.mermaid', scope));
        } catch(e) {
            console.log(e);
        }

        // fix GANTT diagrams (width of lanes is not set correctly) {
            var ganttGraphs = domQuery.all('.mermaid[data-type=gantt] svg', scope);
            each(ganttGraphs, function(svg) {
                var lanes = domQuery.all('g rect.section');
                each(lanes, function(lane) {
                    domAttr.set(lane, 'width', domStyle.get(svg, 'width'));
                });
            });
        // }
    }

    return function(container, markdownString) {
        container.innerHTML = marked(markdownString);
        renderMermaidGraphs(container); // render mermaid graphs
        drawFlowcharts(container);
    };
});


/* jshint ignore:start */
define('../template/tocAnchor',["pastry/pastry","pastry/html/escape"], function (helper) {return function(obj, ne){
var _e=ne?function(s){return s;}:helper.escape,print=function(s,e){_s+=e?(s==null?'':s):_e(s);};obj=obj||{};with(obj){_s='<div data-hash="'+_e(hash)+'"></div>';}return _s;
}});
/* jshint ignore:end */;
/* jshint strict: true, undef: true, unused: true */
/* global define, document */

define('../component/toc',[
    'pastry/pastry',
    'pastry/dom/construct',
    'pastry/dom/query',
    'pastry/fmt/sprintf',
    'pastry/ui/Tree',
    '../template/tocAnchor'
], function(
    pastry,
    domConstruct,
    domQuery,
    sprintf,
    Tree,
    tmplTocAnchor
) {
    'use strict';
    /*
     * @author: Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description: description
     */
    var each = pastry.each;
    //var lc = pastry.lc;
    //var map = pastry.map;
    var toInt = pastry.toInt;
    var uuid = pastry.uuid;

    var tocTree = new Tree({
        onClick: function(node) {
            scrollToNode(node);
        },
        //onDblclick: function(node) {
            //scrollToNode(node);
        //}
    });

    function scrollToNode(node) {
        var anchorSelector = sprintf('[data-hash="%s"]', node.id);
        var anchorNode = domQuery.one(anchorSelector);
        if (anchorNode) {
            anchorNode.scrollIntoView(true);
        }
    }
    function getHeaderId(/*header*/) {
        //var idSeperater = '-';
        //var text = getHeaderText(header);
        //text = lc(text).replace(/\s/g, idSeperater)
            //.replace(/--/g, idSeperater)
            //.replace(/:-/g, idSeperater);
        //if (tocTree.nodeById[text]) {
            //text = uuid(text + idSeperater);
        //}
        //return text;
        return uuid();
    }
    function getHeaderLevel(header) {
        var tagName = header.tagName;
        return toInt(tagName.replace(/h/i, ''));
    }
    function getHeaderText(header) {
        return header.textContent || header.innerText || header.innerHTML;
    }
    function getHeaderSelector(level) {
        var headers = [];
        for (var i = 1; i <= level; i ++) {
            headers.push(sprintf('h%d', i));
        }
        return headers.join(',');
    }

    return function (article, container, maxLevel) {
        container = container || document.body;
        article = article || document.body;
        maxLevel = maxLevel || 3;
        var headers = article.querySelectorAll(getHeaderSelector(maxLevel));
        var currentNode;
        var nodeMetas = [];
        var nodeMetaById = {};

        each(headers, function(header) {
            var id = getHeaderId(/*header*/);

            var anchorNode = domConstruct.toDom(tmplTocAnchor({
                hash: id
            }));
            domConstruct.place(anchorNode, header, 'before');

            var level = getHeaderLevel(header);
            var meta = {
                id: id,
                isBranch: true,
                //isExpanded: false,
                name: getHeaderText(header),
                level: level,
                childIds: [],
            };
            if (currentNode) {
                if (currentNode.level < level) {
                    meta.parentId = currentNode.id;
                    currentNode.childIds.push(meta.id);
                } else {
                    var parentNode = nodeMetaById[currentNode.parentId];
                    while (parentNode) {
                        if (parentNode.level >= level) {
                            parentNode = nodeMetaById[parentNode.parentId];
                        } else {
                            break;
                        }
                    }
                    if (parentNode) {
                        meta.parentId = parentNode.id;
                        parentNode.childIds.push(meta.id);
                    }
                }
            }
            nodeMetas.push(meta);
            nodeMetaById[id] = meta;
            currentNode = meta;
        });
        each(nodeMetas, function(n) {
            if (n.childIds.length === 0) {
                n.isBranch = false;
            }
            tocTree.addNode(n);
        });

        tocTree.placeAt(container);
    };
});


/* jshint strict: true, undef: true, unused: true */
/* global define, setTimeout */

define('main',[
    'pastry/pastry',
    'pastry/dom/class',
    'pastry/dom/construct',
    'pastry/dom/event',
    'pastry/dom/hotkey',
    'pastry/dom/query',
    'pastry/dom/style',
    'pastry/io/ajax',
    '../global/CONST',
    '../component/Modal',
    '../component/Resizer',
    '../component/markedRenderer',
    '../component/toc'
    //'../component/remarkableRenderer'
], function(
    pastry,
    domClass,
    domConstruct,
    domEvent,
    domHotkey,
    domQuery,
    domStyle,
    ajax,
    CONST,
    Modal,
    Resizer,
    markdownRenderer,
    toc
) {
    'use strict';
    /*
     * @author      : Áªù‰∫ëÔºàwensen.lwsÔºâ
     * @description : description
     */
    // preview {
        var previewerDomNode = domQuery.one('#markdown-previewer');
        var content = domQuery.one('script#markdown-content').innerHTML;
        markdownRenderer(previewerDomNode, content);
    // }
    // resizer {
        var articleNode = domQuery.one('.markdown-container');
        new Resizer(articleNode, {
            directions: ['e', 'w'],
            minWidth: 400,
            maxWidth: 1400
        });
    // }
    // toc {
        setTimeout(function() { // optimize markdown rendering
            var tocNode = domQuery.one('#toc');
            var hideOrShowBtn = domQuery.one('#hide-or-show-toc');
            var hideOrShowIcon = domQuery.one('.fa', hideOrShowBtn);
            var headerNode = domQuery.one('header', tocNode);
            var treeHolderNode = domQuery.one('.tree-holder', tocNode);
            var isShown = true;
            function hideToc() {
                domClass.remove(hideOrShowIcon, 'fa-angle-right');
                domClass.add(hideOrShowIcon, 'fa-angle-left');
                domStyle.hide(headerNode);
                domStyle.hide(treeHolderNode);
                domStyle.set(tocNode, 'width', '0');
                isShown = false;
            }
            function showToc() {
                domClass.remove(hideOrShowIcon, 'fa-angle-left');
                domClass.add(hideOrShowIcon, 'fa-angle-right');
                domStyle.show(headerNode);
                domStyle.show(treeHolderNode);
                domStyle.set(tocNode, 'width', '160px');
                isShown = true;
            }

            toc(articleNode, treeHolderNode, 3);

            new Resizer(tocNode, {
                directions: ['w'],
                minWidth: 140,
                maxWidth: 1400,
            });
            new Resizer(treeHolderNode, {
                directions: ['s'],
            });

            domEvent.on(hideOrShowBtn, 'click', function() {
                if (isShown) {
                    hideToc();
                } else {
                    showToc();
                }
            });
            hideToc(); // hide by default
        }, 300);
    // }
});


